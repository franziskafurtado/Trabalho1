/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalho1_bd;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import org.json.JSONObject;

/**
 *
 * @author vitor
 */
public class ConnectionGUIForm extends javax.swing.JFrame {

    /**
     *
     */
    private static String _csvExportDir = System.getProperty("user.dir") + "\\exportedCSV.csv";
    private static String _jsonExportDir = System.getProperty("user.dir") + "\\exportedJSON.json";
    public Connection con;

    public ConnectionGUIForm() {
        initComponents();
    }

    public ConnectionGUIForm(Connection con) {
        initComponents();
        this.con = con;
        try {
            var st = this.con.createStatement();

            DefaultMutableTreeNode root = new DefaultMutableTreeNode("DatabaseRoot");
            DefaultMutableTreeNode tables = new DefaultMutableTreeNode("Tables");
            DefaultMutableTreeNode views = new DefaultMutableTreeNode("Views");

            DatabaseMetaData meta = con.getMetaData();
            ResultSet rs = meta.getTables(con.getCatalog(), null, null, new String[]{"TABLE"});

            while (rs.next()) {
                System.out.println("Table ");

                String tableName = rs.getString(3);
                System.out.println(tableName);

                DefaultMutableTreeNode table = new DefaultMutableTreeNode(tableName);

                var columns = getColumns(tableName);

                columns.forEach(
                        column -> {
                            table.add(column);
                        }
                );
                tables.add(table);
            }

            root.add(tables);

            rs = meta.getTables(con.getCatalog(), null, null, new String[]{"VIEW"});

            while (rs.next()) {
                String tableName = rs.getString("TABLE_NAME");

                DefaultMutableTreeNode view = new DefaultMutableTreeNode(tableName);
                var columns = getColumns(tableName);

                columns.forEach(
                        column -> {
                            view.add(column);
                        }
                );
                views.add(view);

            }

            root.add(views);
            DbTree.setModel(new javax.swing.tree.DefaultTreeModel(root));
        } catch (Exception ex) {
            System.out.println("Erro BD: " + ex);
        }

    }

    private ArrayList<DefaultMutableTreeNode> getColumns(String tableName) {
        ArrayList<DefaultMutableTreeNode> columns = new ArrayList<DefaultMutableTreeNode>();
        try {
            var st = this.con.createStatement();
            ResultSet rst = st.executeQuery(
                    "select * from " + tableName
            );
            ResultSetMetaData rsMetaData = rst.getMetaData();

            int count = rsMetaData.getColumnCount();

            System.out.println(count);

            for (int i = 1; i <= count; i++) {
                columns.add(new DefaultMutableTreeNode(rsMetaData.getColumnName(i) + "-" + getColumnType(rsMetaData.getColumnType(i)) + "(" + rsMetaData.getColumnDisplaySize(i) + ")"));
            }
            rst.close();
            st.close();
            return columns;

        } catch (Exception ex) {
            System.out.println("Erro BD: " + ex);
        }
        return columns;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        executeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlCommandTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        DbTree = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        sqlResultTable = new javax.swing.JTable();
        exportCsvButton = new javax.swing.JButton();
        exportJsonButton = new javax.swing.JButton();
        returnNumberLimit = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        executeButton.setText("Executar");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        sqlCommandTextArea.setColumns(20);
        sqlCommandTextArea.setRows(5);
        jScrollPane1.setViewportView(sqlCommandTextArea);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        DbTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(DbTree);

        sqlResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(sqlResultTable);

        exportCsvButton.setText("Exportar CSV");
        exportCsvButton.setEnabled(false);
        exportCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsvButtonActionPerformed(evt);
            }
        });

        exportJsonButton.setText("Exportar Json");
        exportJsonButton.setEnabled(false);
        exportJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportJsonButtonActionPerformed(evt);
            }
        });

        returnNumberLimit.setText("1000");
        returnNumberLimit.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                returnNumberLimitInputMethodTextChanged(evt);
            }
        });
        returnNumberLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnNumberLimitActionPerformed(evt);
            }
        });
        returnNumberLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                returnNumberLimitKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(exportJsonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(exportCsvButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(returnNumberLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(executeButton)
                            .addComponent(exportCsvButton)
                            .addComponent(exportJsonButton)
                            .addComponent(returnNumberLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        try {
            exportCsvButton.setEnabled(false);
            exportJsonButton.setEnabled(false);

            Statement stmt = this.con.createStatement();
            ResultSet rs = stmt.executeQuery(
                    sqlCommandTextArea.getText() + 
                    " limit " + returnNumberLimit.getText());
            
            ArrayList<String> resultColumns = new ArrayList<>();

            DefaultTableModel dtm = new DefaultTableModel(0, 0);

            if (rs.next()) {
                ResultSetMetaData rsmd = rs.getMetaData();

                ArrayList<String> resultLine = new ArrayList<String>();

                for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                    resultColumns.add(rsmd.getColumnName(i));
                    resultLine.add(rs.getString(i));
                }

                dtm.setColumnIdentifiers(resultColumns.toArray());
                sqlResultTable.setModel(dtm);

                dtm.addRow(resultLine.toArray());

                while (rs.next()) {
                    resultLine = new ArrayList<String>();
                    for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                        resultColumns.add(rsmd.getColumnName(i));
                        resultLine.add(rs.getString(i));
                    }
                    dtm.addRow(resultLine.toArray());
                }
                exportJsonButton.setEnabled(true);
                exportCsvButton.setEnabled(true);
            }
        } catch (SQLException sql1) {
            System.out.println("Erro BD: " + sql1);
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void exportCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCsvButtonActionPerformed
        try {
            System.out.println(_csvExportDir);
            TableModel model = sqlResultTable.getModel();
            FileWriter csv = new FileWriter(new File(_csvExportDir));

            for (int i = 0; i < model.getColumnCount(); i++) {
                csv.write(model.getColumnName(i) + ",");
            }

            csv.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    csv.write(model.getValueAt(i, j).toString() + ",");
                }
                csv.write("\n");
            }

            csv.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportCsvButtonActionPerformed

    private void exportJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportJsonButtonActionPerformed
        // TODO add your handling code here:
        try {
            System.out.println(_jsonExportDir);
            TableModel model = sqlResultTable.getModel();
            FileWriter json = new FileWriter(new File(_jsonExportDir));

            JSONObject objetoJson = new JSONObject();

                // model.re
            for (int i = 0; i < model.getRowCount(); i++) {
                JSONObject linha = new JSONObject();
                
                for (int j = 0; j < model.getColumnCount(); j++) {
                    linha.put(model.getColumnName(j), model.getValueAt(i, j).toString());
                }
                
                objetoJson.append("dados", linha);
                // csv.write(model.getColumnName(i) + ",");
            }
            // for (int i = 0; i < model.getRowCount(); i++) {
               // JSONObject linha = new JSONObject();

                // for (int j = 0; j < model.getColumnCount(); j++) {
                //     linha.put(model.getColumnName(i), model.getValueAt(i, j).toString());
                // }
                // objetoJson.append("dados", linha);
            // }

            json.write(objetoJson.toString());

            json.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportJsonButtonActionPerformed

    private void returnNumberLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnNumberLimitActionPerformed

    }//GEN-LAST:event_returnNumberLimitActionPerformed

    private void returnNumberLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_returnNumberLimitKeyPressed

    }//GEN-LAST:event_returnNumberLimitKeyPressed

    private void returnNumberLimitInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_returnNumberLimitInputMethodTextChanged
        try {
            System.out.println("Change");
            Integer.valueOf(returnNumberLimit.getText());
        } catch (Exception ex) {
            returnNumberLimit.setText("");

            returnNumberLimit.setText("1000");
        }
    }//GEN-LAST:event_returnNumberLimitInputMethodTextChanged

    private String getColumnType(int typeId) {
        switch (typeId) {
            case 2003:
                return "Array";
            case -5:
                return "BigInt";
            case -2:
                return "Binary";
            case -7:
                return "Bit";
            case 2004:
                return "Blob";
            case 16:
                return "Boolean";
            case 1:
                return "Char";
            case 2005:
                return "Clob";
            case 91:
                return "Date";
            case 70:
                return "Datalink";
            case 3:
                return "Decimal";
            case 2001:
                return "Distinct";
            case 8:
                return "Double";
            case 6:
                return "Float";
            case 4:
                return "Integer";
            case 2000:
                return "JavaObject";
            case -16:
                return "VarChar";
            case -15:
                return "Nchar";
            case 2011:
                return "NClob";
            case 12:
                return "Varchar";
            case -3:
                return "VarBinary";
            case -6:
                return "Tiny int";
            case 2014:
                return "TimeStampWZone";
            case 93:
                return "Timestamp";
            case 92:
                return "Time";
            case 2002:
                return "Struct";
            case 2009:
                return "SqlXml";
            case 5:
                return "Smallint";
            case -8:
                return "Rowid";
            case 2012:
                return "Refcursor";
            case 2006:
                return "Ref";
            case 7:
                return "Real";
            case -9:
                return "Nvarchar";
            case 2:
                return "Numeric";
            case 0:
                return "Null";
            default:
                return "";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectionGUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectionGUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectionGUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectionGUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectionGUIForm().setVisible(true);
            }
        });
    }

    enum DataTypes {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree DbTree;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton exportCsvButton;
    private javax.swing.JButton exportJsonButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField returnNumberLimit;
    private javax.swing.JTextArea sqlCommandTextArea;
    private javax.swing.JTable sqlResultTable;
    // End of variables declaration//GEN-END:variables
}
